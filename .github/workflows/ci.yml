name: Continuous Integration (CI)

on:
  push:
    branches:
      - master

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Create .env file
        run: |
          echo "BASE_DB_URL=mongodb://mongo/mre" > ${{ github.workspace }}/.env
          echo "CIPHER_KEY=${{ secrets.CIPHER_KEY }}" >> ${{ github.workspace }}/.env
          echo "CIPHER_IV_KEY=${{ secrets.CIPHER_IV_KEY }}" >> ${{ github.workspace }}/.env
          echo "GATEWAY_PORT=8080" >> ${{ github.workspace }}/.env
          echo "CORS_ENABLED=false" >> ${{ github.workspace }}/.env
          echo "GATEWAY_URL=http://localhost:${GATEWAY_PORT}/api/v2" >> ${{ github.workspace }}/.env
          echo "AUTHENTICATOR_TOKEN_DB_PASSWORD=${{ secrets.AUTHENTICATOR_TOKEN_DB_PASSWORD }}" >> ${{ github.workspace }}/.env
          echo "AUTHENTICATOR_ACCESS_TOKEN_SECRET=${{ secrets.AUTHENTICATOR_ACCESS_TOKEN_SECRET }}" >> ${{ github.workspace }}/.env
          echo "AUTHENTICATOR_REFRESH_TOKEN_SECRET=${{ secrets.AUTHENTICATOR_REFRESH_TOKEN_SECRET }}" >> ${{ github.workspace }}/.env
          echo "AUTHENTICATOR_RESET_TOKEN_SECRET=${{ secrets.AUTHENTICATOR_RESET_TOKEN_SECRET }}" >> ${{ github.workspace }}/.env
          echo "ALLOW_SENDING_EMAILS=false" >> ${{ github.workspace }}/.env
          echo "MAILGUN_API_KEY=" >> ${{ github.workspace }}/.env
          echo "MAILGUN_DOMAIN=" >> ${{ github.workspace }}/.env
          echo "EMAIL_FROM=" >> ${{ github.workspace }}/.env
          echo "EMAIL_REPLY_TO=" >> ${{ github.workspace }}/.env
          echo "EMAIL_BCC=" >> ${{ github.workspace }}/.env
          echo "DEMO_MODE=false" >> ${{ github.workspace }}/.env
          echo "RESTORE_DB=false" >> ${{ github.workspace }}/.env
          echo "DOMAIN_URL=http://localhost" >> ${{ github.workspace }}/.env
          echo "LANDLORD_BASE_PATH=/landlord" >> ${{ github.workspace }}/.env
          echo "LANDLORD_APP_URL=http://localhost:${GATEWAY_PORT}/landlord" >> ${{ github.workspace }}/.env
          echo "TENANT_BASE_PATH=/tenant" >> ${{ github.workspace }}/.env
          echo "TENANT_APP_URL=http://localhost:${GATEWAY_PORT}/tenant" >> ${{ github.workspace }}/.env

      - name: Create docker-images directory
        run: mkdir -p ${{ github.workspace }}/docker-images

      - name: Store .env file and docker-images directory in cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.env
            ${{ github.workspace }}/docker-images
          key: ${{ github.sha }}

  build_service_emailer:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker and MRE
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose
          cd ${{ github.workspace }}
          chmod +x mre

      - name: Restore .env file and docker images from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.env
            ${{ github.workspace }}/docker-images
          key: ${{ github.sha }}

      - name: Build and produce Docker images (webapps, services)
        run: |
          cd ${{ github.workspace }}
          ./mre build --ci --service emailer

      - name: Compress Docker images
        run: |
          mkdir -p ${{ github.workspace }}/docker-images
          cd ${{ github.workspace }}/docker-images
          docker save -o emailer.tar mre/emailer

  build_service_api:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker and MRE
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose
          cd ${{ github.workspace }}
          chmod +x mre

      - name: Restore .env file and docker images from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.env
            ${{ github.workspace }}/docker-images
          key: ${{ github.sha }}

      - name: Build and produce Docker images (webapps, services)
        run: |
          cd ${{ github.workspace }}
          ./mre build --ci --service api

      - name: Compress Docker images
        run: |
          mkdir -p ${{ github.workspace }}/docker-images
          cd ${{ github.workspace }}/docker-images
          docker save -o api.tar mre/api

  build_service_authenticator:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker and MRE
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose
          cd ${{ github.workspace }}
          chmod +x mre

      - name: Restore .env file and docker images from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.env
            ${{ github.workspace }}/docker-images
          key: ${{ github.sha }}

      - name: Build and produce Docker images (webapps, services)
        run: |
          cd ${{ github.workspace }}
          ./mre build --ci --service authenticator

      - name: Compress Docker images
        run: |
          mkdir -p ${{ github.workspace }}/docker-images
          cd ${{ github.workspace }}/docker-images
          docker save -o authenticator.tar mre/authenticator

  build_service_gateway:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker and MRE
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose
          cd ${{ github.workspace }}
          chmod +x mre

      - name: Restore .env file and docker images from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.env
            ${{ github.workspace }}/docker-images
          key: ${{ github.sha }}

      - name: Build and produce Docker images (webapps, services)
        run: |
          cd ${{ github.workspace }}
          ./mre build --ci --service gateway

      - name: Compress Docker images
        run: |
          mkdir -p ${{ github.workspace }}/docker-images
          cd ${{ github.workspace }}/docker-images
          docker save -o gateway.tar mre/gateway

  build_service_tenant_frontend:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker and MRE
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose
          cd ${{ github.workspace }}
          chmod +x mre

      - name: Restore .env file and docker images from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.env
            ${{ github.workspace }}/docker-images
          key: ${{ github.sha }}

      - name: Build and produce Docker images (webapps, services)
        run: |
          cd ${{ github.workspace }}
          ./mre build --ci --service tenant-frontend

      - name: Compress Docker images
        run: |
          mkdir -p ${{ github.workspace }}/docker-images
          cd ${{ github.workspace }}/docker-images
          docker save -o tenant-frontend.tar mre/tenant-frontend

  build_service_landlord_frontend:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker and MRE
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose
          cd ${{ github.workspace }}
          chmod +x mre

      - name: Restore .env file and docker images from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.env
            ${{ github.workspace }}/docker-images
          key: ${{ github.sha }}

      - name: Build and produce Docker images (webapps, services)
        run: |
          cd ${{ github.workspace }}
          ./mre build --ci --service landlord-frontend

      - name: Compress Docker images
        run: |
          mkdir -p ${{ github.workspace }}/docker-images
          cd ${{ github.workspace }}/docker-images
          docker save -o landlord-frontend.tar mre/landlord-frontend

  build_service_pdfgenerator:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker and MRE
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose
          cd ${{ github.workspace }}
          chmod +x mre

      - name: Restore .env file and docker images from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.env
            ${{ github.workspace }}/docker-images
          key: ${{ github.sha }}

      - name: Build and produce Docker images (webapps, services)
        run: |
          cd ${{ github.workspace }}
          ./mre build --ci --service pdfgenerator

      - name: Compress Docker images
        run: |
          mkdir -p ${{ github.workspace }}/docker-images
          cd ${{ github.workspace }}/docker-images
          docker save -o pdfgenerator.tar mre/pdfgenerator

  test:
    runs-on: ubuntu-latest
    needs:
      [
        build_service_api,
        build_service_emailer,
        build_service_pdfgenerator,
        build_service_authenticator,
        build_service_gateway,
        build_service_landlord_frontend,
        build_service_tenant_frontend,
      ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker and MRE
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose
          cd ${{ github.workspace }}
          chmod +x mre

      - name: Restore .env file and docker images from cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.env
            ${{ github.workspace }}/docker-images
          key: ${{ github.sha }}

      - name: Load Docker images from cache
        run: |
          cd ${{ github.workspace }}/docker-images
          docker load -i landlord-frontend.tar
          docker load -i tenant-frontend.tar
          docker load -i pdfgenerator.tar
          docker load -i api.tar
          docker load -i emailer.tar
          docker load -i authenticator.tar
          docker load -i gateway.tar

      - name: Start Application (webapps, services, databases)
        run: |
          cd ${{ github.workspace }}
          ./mre start --ci
          ./mre status

      - name: Run tests
        run: |
          yarn
          yarn run e2e:ci

      - name: Stop application
        run: |
          cd ${{ github.workspace }}
          ./mre stop --ci
